{"version":3,"sources":["App.module.scss","utils/Utils.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","app","commandsText","outputs","report","directions","NORTH","EAST","SOUTH","WEST","movement","0","x","y","1","2","3","isWithinBounds","validateCommand","instruction","split","command","splitCommand","length","splitPosition","Object","slicedToArray","_splitPosition","xPos","yPos","facing","xPosInt","parseInt","yPosInt","isNaN","undefined","validatePlaceCommand","_includes","App","_useState","useState","_useState2","instructions","setInstructions","_useState3","_useState4","setOutputs","useEffect","hasPlacedRobot","robotInfo","direction","reports","splitInstructions","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","value","_instruction$split","_instruction$split2","payload","_invert","push","concat","_payload$split","_payload$split2","directionValues","newX","newY","err","return","runInstructions","react_default","a","createElement","className","styles","onChange","e","target","spellCheck","map","output","key","shortid","generate","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oIACAA,EAAAC,QAAA,CAAkBC,IAAA,iBAAAC,aAAA,0BAAAC,QAAA,qBAAAC,OAAA,oLCGZC,EAAa,CACjBC,MAAO,EACPC,KAAM,EACNC,MAAO,EACPC,KAAM,GAIFC,EAAW,CACfC,EAAG,CAAEC,EAAG,EAAGC,EAAG,GACdC,EAAG,CAAEF,EAAG,EAAGC,EAAG,GACdE,EAAG,CAAEH,EAAG,EAAGC,GAAI,GACfG,EAAG,CAAEJ,GAAI,EAAGC,EAAG,IAKXI,EAAiB,SAACL,EAAGC,GACzB,OAAOD,GAAK,GAAKC,GAAK,GAAKD,EAHN,GAG4BC,EAH5B,GAsCVK,EAAkB,SAAAC,GAG7B,MAAgB,UADAA,EAAYC,MAAM,KAAK,GA7BZ,SAAAC,GAC3B,IAAMC,EAAeD,EAAQD,MAAM,KAGnC,GAA4B,IAAxBE,EAAaC,OACf,OAAO,EAL6B,IAShCC,EATgCC,OAAAC,EAAA,EAAAD,CAQjBH,EARiB,MASPF,MAAM,KAErC,GAA6B,IAAzBI,EAAcD,OAChB,OAAO,EAZ6B,IAAAI,EAAAF,OAAAC,EAAA,EAAAD,CAeTD,EAfS,GAe/BI,EAf+BD,EAAA,GAezBE,EAfyBF,EAAA,GAenBG,EAfmBH,EAAA,GAgBhCI,EAAUC,SAASJ,GACnBK,EAAUD,SAASH,GAEzB,OAAIK,MAAMH,KAAYG,MAAMD,SAAmCE,IAAvB9B,EAAWyB,GAY1CM,CAAqBjB,GAGrBkB,IAAU,CAAC,SAAU,OAAQ,OAAQ,SAAUlB,IC1B3CmB,EAjCH,WAAM,IAAAC,EACwBC,mBAAS,IADjCC,EAAAhB,OAAAC,EAAA,EAAAD,CAAAc,EAAA,GACTG,EADSD,EAAA,GACKE,EADLF,EAAA,GAAAG,EAEcJ,mBAAS,IAFvBK,EAAApB,OAAAC,EAAA,EAAAD,CAAAmB,EAAA,GAETzC,EAFS0C,EAAA,GAEAC,EAFAD,EAAA,GAOhB,OAJAE,oBAAU,WACRD,ED6D2B,SAAAJ,GAC7B,IAAIM,GAAiB,EACfC,EAAY,CAAErC,GAAI,EAAGC,GAAI,EAAGqC,WAAY,GACxCC,EAAU,GAEVC,EAAoBV,EAAatB,MAAM,MALAiC,GAAA,EAAAC,GAAA,EAAAC,OAAApB,EAAA,IAM7C,QAAAqB,EAAAC,EAA0BL,EAA1BM,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAA6C,KAAlClC,EAAkCqC,EAAAM,MAAAC,EAChB5C,EAAYC,MAAM,KADF4C,EAAAvC,OAAAC,EAAA,EAAAD,CAAAsC,EAAA,GACpC1C,EADoC2C,EAAA,GAC3BC,EAD2BD,EAAA,GAI3C,IAAKhB,EAAgB,CACnB,GAAgB,UAAZ3B,GAAuBH,EAAgBC,GACzC,SAEA6B,GAAiB,EAIrB,GAAI9B,EAAgBC,GAClB,OAAQE,GACN,IAAK,SAEH,IAAM6B,EAAYgB,IAAQ7D,GAAY4C,EAAUC,WAChDC,EAAQgB,KAAR,GAAAC,OAAgBnB,EAAUrC,EAA1B,KAAAwD,OAA+BnB,EAAUpC,EAAzC,KAAAuD,OAA8ClB,IAC9C,MAOF,IAAK,OACHD,EAAUC,WAAaD,EAAUC,UAAY,EAAI,GAAK,EACtD,MAEF,IAAK,QACHD,EAAUC,WAAaD,EAAUC,UAAY,EAAI,GAAK,EACtD,MAEF,IAAK,QAAS,IAAAmB,EACiBJ,EAAQ7C,MAAM,KAD/BkD,EAAA7C,OAAAC,EAAA,EAAAD,CAAA4C,EAAA,GACLzC,EADK0C,EAAA,GACCzC,EADDyC,EAAA,GACOxC,EADPwC,EAAA,GAENvC,EAAUC,SAASJ,GACnBK,EAAUD,SAASH,GACrBZ,EAAec,EAASE,KAC1BgB,EAAUrC,EAAImB,EACdkB,EAAUpC,EAAIoB,EACdgB,EAAUC,UAAYlB,SAAS3B,EAAWyB,KAG5C,MAEF,IAAK,OACH,IAAMyC,EAAkB7D,EAASuC,EAAUC,WACrCsB,EAAOvB,EAAUrC,EAAI2D,EAAgB3D,EACrC6D,EAAOxB,EAAUpC,EAAI0D,EAAgB1D,EACvCI,EAAeuD,EAAMC,KACvBxB,EAAUrC,EAAI4D,EACdvB,EAAUpC,EAAI4D,KAzDqB,MAAAC,GAAApB,GAAA,EAAAC,EAAAmB,EAAA,YAAArB,GAAA,MAAAI,EAAAkB,QAAAlB,EAAAkB,SAAA,WAAArB,EAAA,MAAAC,GAmE7C,OAAOJ,EChIMyB,CAAgBlC,KAC1B,CAACA,IAGFmC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOhF,KACrB4E,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,YACEC,UAAWC,IAAO/E,aAClB4D,MAAOpB,EACPwC,SAAU,SAAAC,GAAC,OAAIxC,EAAgBwC,EAAEC,OAAOtB,QACxCuB,WAAW,WAIfR,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAO9E,SACrB0E,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAO7E,QACrByE,EAAAC,EAAAC,cAAA,UACG5E,EAAQmF,IAAI,SAAAC,GAAM,OACjBV,EAAAC,EAAAC,cAAA,MAAIS,IAAKC,IAAQC,YAAaH,UCjBxBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b02c647f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__MSMPD\",\"commandsText\":\"App_commandsText__3ifD4\",\"outputs\":\"App_outputs__2o39G\",\"report\":\"App_report__2siFh\"};","import _includes from 'lodash/includes'\nimport _invert from 'lodash/invert'\n\n// Direction Number to String Enum\nconst directions = {\n  NORTH: 0,\n  EAST: 1,\n  SOUTH: 2,\n  WEST: 3,\n}\n\n// Modification Enum\nconst movement = {\n  0: { x: 0, y: 1 },\n  1: { x: 1, y: 0 },\n  2: { x: 0, y: -1 },\n  3: { x: -1, y: 0 },\n}\n\nconst MAX_BOARD_SIZE = 5\n\nconst isWithinBounds = (x, y) => {\n  return x >= 0 && y >= 0 && x < MAX_BOARD_SIZE && y < MAX_BOARD_SIZE\n}\n\n// Form: PLACE X,Y,F\n// 1. Original command must have array length of 2 when split\n// 2. Position instruction must have array length of 3 when split\n// 3. X, Y must be numbers and F must be one of the four directions\n// Note: Does not check if it is in bound as it is a syntax check only\nconst validatePlaceCommand = command => {\n  const splitCommand = command.split(' ')\n\n  // Check [1]\n  if (splitCommand.length !== 2) {\n    return false\n  }\n\n  const [, position] = splitCommand\n  const splitPosition = position.split(',')\n  // Check [2]\n  if (splitPosition.length !== 3) {\n    return false\n  }\n\n  const [xPos, yPos, facing] = splitPosition\n  const xPosInt = parseInt(xPos)\n  const yPosInt = parseInt(yPos)\n  // Check [3]\n  if (isNaN(xPosInt) || isNaN(yPosInt) || directions[facing] === undefined) {\n    return false\n  }\n\n  return true\n}\n\n// Validate that the syntax of the command is correct\nexport const validateCommand = instruction => {\n  // Check based off the first word which is the command word\n  const command = instruction.split(' ')[0]\n  if (command === 'PLACE') {\n    return validatePlaceCommand(instruction)\n  } else {\n    // We check via instruction as opposed to command to catch stray characters\n    return _includes(['REPORT', 'MOVE', 'LEFT', 'RIGHT'], instruction)\n  }\n}\n\n// Runs the instructions, validating as the instructions get read.\n// Returns an array of output commands from REPORT commands\nexport const runInstructions = instructions => {\n  let hasPlacedRobot = false\n  const robotInfo = { x: -1, y: -1, direction: -1 }\n  const reports = []\n\n  const splitInstructions = instructions.split('\\n')\n  for (const instruction of splitInstructions) {\n    const [command, payload] = instruction.split(' ')\n    // While PLACE has not been called, we skip over commands.\n    // If PLACE is called, first validate to make sure it's valid\n    if (!hasPlacedRobot) {\n      if (command !== 'PLACE' && validateCommand(instruction)) {\n        continue\n      } else {\n        hasPlacedRobot = true\n      }\n    }\n\n    if (validateCommand(instruction)) {\n      switch (command) {\n        case 'REPORT': {\n          // Get the string based off the direction by inverting the enum\n          const direction = _invert(directions)[robotInfo.direction]\n          reports.push(`${robotInfo.x},${robotInfo.y},${direction}`)\n          break\n        }\n        // 0-3 represents North to West clockwise.\n        // Going left means -1, right means + 1\n        // To account for going out of bounds when iterating/decrementing\n        // we first add 4 to ensure it's a positive number, then take the modulus to get the final direction\n        // This could alternatively be written more explicitly with -1 and 4 being taken into account in LEFT/RIGHT instructions\n        case 'LEFT': {\n          robotInfo.direction = (robotInfo.direction + 4 - 1) % 4\n          break\n        }\n        case 'RIGHT': {\n          robotInfo.direction = (robotInfo.direction + 4 + 1) % 4\n          break\n        }\n        case 'PLACE': {\n          const [xPos, yPos, facing] = payload.split(',')\n          const xPosInt = parseInt(xPos)\n          const yPosInt = parseInt(yPos)\n          if (isWithinBounds(xPosInt, yPosInt)) {\n            robotInfo.x = xPosInt\n            robotInfo.y = yPosInt\n            robotInfo.direction = parseInt(directions[facing])\n          }\n\n          break\n        }\n        case 'MOVE': {\n          const directionValues = movement[robotInfo.direction]\n          const newX = robotInfo.x + directionValues.x\n          const newY = robotInfo.y + directionValues.y\n          if (isWithinBounds(newX, newY)) {\n            robotInfo.x = newX\n            robotInfo.y = newY\n          }\n          break\n        }\n        default:\n          break\n      }\n    }\n  }\n\n  return reports\n}\n","import React, { useState, useEffect } from 'react'\nimport shortid from 'shortid'\nimport styles from './App.module.scss'\nimport { runInstructions } from './utils/Utils'\n\nconst App = () => {\n  const [instructions, setInstructions] = useState('')\n  const [outputs, setOutputs] = useState([])\n  useEffect(() => {\n    setOutputs(runInstructions(instructions))\n  }, [instructions])\n\n  return (\n    <div className={styles.app}>\n      <div>\n        <h3>Input</h3>\n        <textarea\n          className={styles.commandsText}\n          value={instructions}\n          onChange={e => setInstructions(e.target.value)}\n          spellCheck=\"false\"\n        />\n      </div>\n\n      <div className={styles.outputs}>\n        <h3>Report Outputs</h3>\n        <div className={styles.report}>\n          <ul>\n            {outputs.map(output => (\n              <li key={shortid.generate()}>{output}</li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}